generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cities {
  cityId       Int            @id @default(autoincrement())
  name         String         @db.VarChar(100)
  countryName  String         @db.VarChar(100)
  campingSpots campingSpots[]
}

model styles {
  styleId     Int          @id @default(autoincrement())
  styleName   String       @db.VarChar(100)
  description String?      @db.Text
  spotstyles  spotstyles[]
}

model users {
  userId      Int      @id @default(autoincrement())
  email       String   @unique @db.VarChar(255)
  password    String   @db.VarChar(255)
  firstName   String   @db.VarChar(100)
  lastName    String   @db.VarChar(100)
  birthDate   DateTime @db.Date
  phoneNumber String?  @db.VarChar(30)
  role        String   @default("user")

  campingSpots campingSpots[] @relation("OwnerSpots")
  bookings     bookings[]     @relation("UserBookings")
  reviews      reviews[]
}

model campingSpots {
  spotId        Int       @id @default(autoincrement())
  userId        Int
  cityId        Int?
  description   String?   @db.Text
  streetAddress String?   @db.VarChar(255)
  instagramLink String?   @db.VarChar(255)
  portfolioLink String?   @db.VarChar(255)
  imageURL      String?   @db.VarChar(255)
  createdAt     DateTime? @default(now()) @db.DateTime(0)

  owner          users            @relation("OwnerSpots", fields: [userId], references: [userId])
  city           cities?          @relation(fields: [cityId], references: [cityId])
  spotstyles     spotstyles[]
  availabilities availabilities[]
  bookings       bookings[]       @relation("SpotBookings")
}

model spotstyles {
  id      Int @id @default(autoincrement())
  spotId  Int
  styleId Int

  campingSpot campingSpots @relation(fields: [spotId], references: [spotId])
  style       styles       @relation(fields: [styleId], references: [styleId])

  @@index([spotId])
  @@index([styleId])
}

model availabilities {
  id       Int      @id @default(autoincrement())
  spotId   Int
  dateFrom DateTime
  dateTo   DateTime
  isBooked Boolean  @default(false)

  spot campingSpots @relation(fields: [spotId], references: [spotId], onDelete: Cascade)

  @@index([spotId])
}

model bookings {
  bookingId        Int      @id @default(autoincrement())
  userId           Int
  spotId           Int
  startDate        DateTime
  endDate          DateTime
  referenceURL     String?
  comment          String?
  isColor          Boolean  @default(false)
  price            Float?
  commissionAmount Float?
  createdAt        DateTime @default(now())

  user    users        @relation("UserBookings", fields: [userId], references: [userId])
  spot    campingSpots @relation("SpotBookings", fields: [spotId], references: [spotId])
  reviews reviews[]
}

model reviews {
  reviewId  Int       @id @default(autoincrement())
  userId    Int
  bookingId Int
  createdAt DateTime? @default(now())
  rating    Int?
  comment   String?

  user    users    @relation(fields: [userId], references: [userId])
  booking bookings @relation(fields: [bookingId], references: [bookingId])

  @@index([bookingId])
}
